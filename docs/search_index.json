[["index.html", "Earth Hologenome Initiative | Pietroni et al. in prep Practical considerations for hologenomic data generation and analysis in wild vertebrates 1 Introduction 1.1 Prepare the R environment", " Earth Hologenome Initiative | Pietroni et al. in prep Practical considerations for hologenomic data generation and analysis in wild vertebrates Carlotta Pietroni, Nanna Gaun, Jonas Lauritsen, Aoife Leonard, Garazi Martin, Ostaizka Aizpurua, Antton Alberdi1, Carlotta Pietroni 2024-06-09 1 Introduction This webbook contains all the code used for the comparative study on the generation of metagenomic data from faeces of various species using three extraction methods. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/earthhologenome/EHI_technical_considerations.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rairtable) library(phyloseq) library(ggtree) library(ape) library(ggnewscale) library(ggtreeExtra) library(nlme) library(broom) library(broom.mixed) University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["metadata-access.html", "2 Metadata access 2.1 Laboratory 2.2 Bioinformatics 2.3 Host species", " 2 Metadata access Earth Hologenome Initiative metadata are stored in Airtable databases. Contents of those databases can be fetched using the R package raritable. However, data can be directly fetched only with personal access tokens. The relevant fraction of the EHI metadata is published on the EHI website www.earthhologenome.org/database. 2.1 Laboratory 2.1.1 Samples airtable(&quot;tblW03Z3DcjRdEkoS&quot;, &quot;appQpr6MxnaiVHsHy&quot;) %&gt;% read_airtable(., fields = c( #Sample columns &quot;Code&quot;,&quot;Type&quot;,&quot;Origin&quot;,&quot;Freshness&quot;,&quot;Freezing&quot;, #Host specimen columns &quot;specimen_id&quot;,&quot;Species&quot;,&quot;Family&quot;,&quot;Order&quot;,&quot;Class&quot;,&quot;Development&quot;,&quot;Sex&quot;,&quot;Length (mm)&quot;,&quot;Weight (g)&quot;, #Capture columns &quot;captures_flat&quot;,&quot;Place&quot;,&quot;Country&quot;,&quot;Biome&quot;,&quot;Environment&quot;,&quot;Latitude reduced&quot;,&quot;Longitude reduced&quot;), id_to_col = TRUE) %&gt;% as_tibble() %&gt;% unnest() %&gt;% select(-airtable_record_id) %&gt;% #rename columns rename( #Sample columns sample_id=Code, sample_type=Type, sample_origin=Origin, sample_freshness=Freshness, sample_freezing=Freezing, #Host specimen columns specimen_id=specimen_id, specimen_species=Species, specimen_order=Order, specimen_family=Family, specimen_class=Class, specimen_development=Development, specimen_sex=Sex, specimen_length=`Length (mm)`, specimen_weight=`Weight (g)`, #Capture columns capture_id=captures_flat, capture_place=Place, capture_country=Country, capture_biome=Biome, capture_environment=Environment, capture_latitude=`Latitude reduced`, capture_longitude=`Longitude reduced`, ) %&gt;% #remove negative controls filter(specimen_id != &quot;&quot;) %&gt;% #add taxonomy group for analysis mutate(tax_group = case_when( !str_detect(specimen_order, &quot;Chiroptera&quot;) &amp; str_detect(specimen_class, &quot;Mammalia&quot;) ~ &quot;Mammals&quot;, str_detect(specimen_order, &quot;Chiroptera&quot;) ~ &quot;Bats&quot;, str_detect(specimen_order, &quot;Squamata&quot;) ~ &quot;Reptiles&quot;, str_detect(specimen_class, &quot;Aves&quot;) ~ &quot;Birds&quot;, str_detect(specimen_class, &quot;Amphibia&quot;) ~ &quot;Amphibians&quot; )) %&gt;% #save clean table write_tsv(&quot;data/sample.tsv&quot;) 2.1.2 Extraction airtable(&quot;tblBcTZcRG1E9wsGO&quot;, &quot;appQpr6MxnaiVHsHy&quot;) %&gt;% read_airtable(., fields = c( #Sample columns &quot;Ex code&quot;,&quot;EX ng/ul&quot;,&quot;EX ul&quot;,&quot;EX DNA ng&quot;,&quot;bb_flat&quot;), id_to_col = TRUE) %&gt;% as_tibble() %&gt;% unnest() %&gt;% select(-airtable_record_id) %&gt;% #rename columns rename( extraction_id=`Ex code`, extraction_concentration=`EX ng/ul`, extraction_volume=`EX ul`, extraction_total=`EX DNA ng`, sample_id=`bb_flat`, ) %&gt;% #save clean table write_tsv(&quot;data/extraction.tsv&quot;) 2.1.3 Library airtable(&quot;tblo6AuYpxbbGw9gh&quot;, &quot;appQpr6MxnaiVHsHy&quot;) %&gt;% read_airtable(., fields = c( #Sample columns &quot;LI Code&quot;,&quot;ex_sample_flat&quot;,&quot;Datasets_flat&quot;,&quot;sample_flat&quot;, #library stats &quot;Input volume&quot;,&quot;Input DNA (ng)&quot;,&quot;Adaptor nM&quot;,&quot;Required PCR cycles&quot;), id_to_col = TRUE) %&gt;% as_tibble() %&gt;% unnest() %&gt;% select(-airtable_record_id) %&gt;% #rename columns rename( #sample identifiers library_id=`LI Code`, sample_id=sample_flat, extraction_id=ex_sample_flat, sequencing_datasets=Datasets_flat, #library stats library_input_volume=`Input volume`, library_input_dna=`Input DNA (ng)`, library_adaptor_molarity=`Adaptor nM`, library_PCR_cycles_required=`Required PCR cycles` ) %&gt;% #save clean table write_tsv(&quot;data/library.tsv&quot;) 2.1.4 Index airtable(&quot;tblhfsiR4NI9XJQG0&quot;, &quot;appQpr6MxnaiVHsHy&quot;) %&gt;% read_airtable(., fields = c( #Sample columns &quot;IN Code&quot;,&quot;li_sample_flat&quot;,&quot;Datasets_flat&quot;, #indexing stats &quot;Adaptors (nM)&quot;,&quot;Library (nM)&quot;,&quot;Number of PCR cycles&quot;), id_to_col = TRUE) %&gt;% as_tibble() %&gt;% unnest() %&gt;% select(-airtable_record_id) %&gt;% #rename columns rename( #sample identifiers index_id=`IN Code`, library_id=li_sample_flat, #indexing stats index_adaptors_molarity=`Adaptors (nM)`, index_library_molarity=`Library (nM)`, index_PCR_cycles_given=`Number of PCR cycles`) %&gt;% #save clean table write_tsv(&quot;data/index.tsv&quot;) 2.1.5 Sequence airtable(&quot;tblaMWLkBUn2g5gRR&quot;, &quot;appQpr6MxnaiVHsHy&quot;) %&gt;% read_airtable(., fields = c(#Sample columns &quot;EHI_number&quot;,&quot;in_code_flat&quot;, #Sequencing information &quot;Raw data size (GB)&quot;,&quot;Q20%&quot;,&quot;Q30%&quot;,&quot;GC%&quot;), id_to_col = TRUE) %&gt;% as_tibble() %&gt;% unnest() %&gt;% select(-airtable_record_id) %&gt;% #rename columns rename( #sample identifiers sequence_id=EHI_number, index_id=in_code_flat, #sequencing information sequence_data=`Raw data size (GB)`, sequence_q20=`Q20%`, sequence_q30=`Q30%`, sequence_gc=`GC%` ) %&gt;% #save clean table write_tsv(&quot;data/sequence.tsv&quot;) 2.2 Bioinformatics 2.2.1 Preprocessing airtable(&quot;tblJfLRU2FIVz37Y1&quot;, &quot;appQpr6MxnaiVHsHy&quot;) %&gt;% read_airtable(., fields = c(#Sample columns &quot;Code&quot;,&quot;EHI_plaintext&quot;, #Host genome info &quot;reference_genome_flat&quot;,&quot;Reference genome closeness&quot;, #Quality-filtering statistics &quot;reads_pre_fastp&quot;,&quot;reads_post_fastp&quot;,&quot;bases_pre_fastp&quot;,&quot;bases_post_fastp&quot;,&quot;adapter_trimmed_reads&quot;,&quot;adapter_trimmed_bases&quot;,&quot;host_reads&quot;,&quot;metagenomic_bases&quot;,&quot;host_bases&quot;, #Metagenome properties &quot;singlem_fraction&quot;,&quot;C&quot;), id_to_col = TRUE) %&gt;% as_tibble() %&gt;% unnest() %&gt;% select(-airtable_record_id) %&gt;% #rename columns rename( #data identifiers preprocessing_id=Code, sequence_id=EHI_plaintext, #host genome info reference_id=reference_genome_flat, reference_closenees=`Reference genome closeness`, #metagenomic complexity estimation nonpareil_coverage=C ) %&gt;% #save clean table write_tsv(&quot;data/preprocessing.tsv&quot;) 2.2.2 Assembly airtable(&quot;tblG6ZIvkYN844I97&quot;, &quot;appQpr6MxnaiVHsHy&quot;) %&gt;% read_airtable(., fields = c(&quot;ID&quot;,&quot;Assembly_code&quot;,&quot;EHI_number_api&quot;,&quot;preprocessed_flat&quot;, &quot;Type (from AB Batch)&quot;,&quot;metagenomic_bases&quot;,&quot;N50&quot;,&quot;L50&quot;,&quot;num_contigs&quot;,&quot;largest_contig&quot;,&quot;num_bins&quot;), id_to_col = TRUE) %&gt;% as_tibble() %&gt;% unnest() %&gt;% select(-airtable_record_id) %&gt;% #rename columns rename( #data identifiers assembly_input_id=ID, #in coassemblies multiple assembly_input_id&#39;s link to a single assembly_id assembly_id=Assembly_code, preprocessing_id=preprocessed_flat, sequence_id=EHI_number_api, #assembly information assembly_type=`Type (from AB Batch)`, assembly_input_bases=metagenomic_bases, #stats assembly_n50=N50, assembly_l50=L50, assembly_num_contigs=num_contigs, assembly_largest_contig=largest_contig, assembly_num_bins=num_bins ) %&gt;% #save clean table write_tsv(&quot;data/assembly.tsv&quot;) 2.2.3 Genomes airtable(&quot;tblMzd3oyaJhdeQcs&quot;, &quot;appWbHBNLE6iAsMRV&quot;) %&gt;% read_airtable(., fields = c(&quot;ID&quot;,&quot;eha_number&quot;, #Taxonomy &quot;domain&quot;,&quot;phylum&quot;,&quot;class&quot;,&quot;order&quot;,&quot;family&quot;,&quot;genus&quot;,&quot;species&quot;,&quot;taxonomy_level&quot;, #Quality &quot;completeness&quot;,&quot;contamination&quot;,&quot;size&quot;,&quot;GC&quot;,&quot;N50&quot;,&quot;coding_density&quot;,&quot;contigs&quot;, #Host &quot;host_species&quot;), id_to_col = TRUE) %&gt;% as_tibble() %&gt;% unnest() %&gt;% select(-airtable_record_id) %&gt;% #rename columns rename( #data identifiers mag_id=ID, assembly_id=eha_number, #taxonomy mag_domain=domain, mag_phylum=phylum, mag_class=class, mag_order=order, mag_family=family, mag_genus=genus, mag_species=species, mag_taxonomy_level=taxonomy_level, #mag stats mag_completeness=completeness, mag_contamination=contamination, mag_size=size, mag_gc=GC, mag_n50=N50, mag_contigs=contigs ) %&gt;% #save clean table write_tsv(&quot;data/mag.tsv&quot;) 2.2.4 Reference genomes airtable(&quot;tbl1t5vnst50DjT9A&quot;, &quot;app6ADWyLxBkDcqYX&quot;) %&gt;% read_airtable(., fields = c(&quot;Code&quot;,&quot;Accession&quot;,&quot;species_flat&quot;,&quot;Quality&quot;,&quot;Size (MB)&quot;), id_to_col = TRUE) %&gt;% as_tibble() %&gt;% unnest() %&gt;% select(-airtable_record_id) %&gt;% #rename columns rename( #data identifiers reference_id=Code, reference_accession=Accession, reference_species=species_flat, #genome stats reference_quality=Quality, reference_size=`Size (MB)` ) %&gt;% #save clean table write_tsv(&quot;data/reference.tsv&quot;) 2.3 Host species host_metadata &lt;- airtable(&quot;tblaRHhZHRPMUjcKJ&quot;, &quot;app6ADWyLxBkDcqYX&quot;) %&gt;% read_airtable(., fields = c(&quot;Name&quot;,&quot;taxid&quot;,&quot;genus_flat&quot;,&quot;family_flat&quot;,&quot;order_flat&quot;,&quot;class_flat&quot;), id_to_col = TRUE) %&gt;% as_tibble() %&gt;% unnest() %&gt;% select(-airtable_record_id) %&gt;% #only retain samples associated with samples rename(host_species=Name, host_genus=genus_flat, host_family=family_flat, host_order=order_flat, host_class=class_flat) %&gt;% # Write to table write_tsv(&quot;data/host.tsv&quot;) "],["general-statistics.html", "3 General statistics 3.1 Sample statistics 3.2 Data statistics", " 3 General statistics 3.1 Sample statistics 3.1.1 Number of specimens read_tsv(&quot;data/sample.tsv&quot;) %&gt;% select(specimen_id) %&gt;% unique() %&gt;% nrow() [1] 4364 3.1.2 Number of species read_tsv(&quot;data/sample.tsv&quot;) %&gt;% select(specimen_species) %&gt;% unique() %&gt;% nrow() [1] 244 3.1.3 Number of orders read_tsv(&quot;data/sample.tsv&quot;) %&gt;% select(specimen_order) %&gt;% unique() %&gt;% nrow() [1] 22 3.1.4 Origin of samples (Figure S1) read_tsv(&quot;data/sample.tsv&quot;) %&gt;% #subset columns select( sample_id, specimen_species, specimen_order, specimen_class, capture_latitude, capture_longitude ) %&gt;% #Add jitter to points mutate( capture_latitude_jitter=capture_latitude+rnorm(length(capture_latitude), mean=0, sd=0.5), capture_longitude_jitter=capture_longitude+rnorm(length(capture_longitude), mean=0, sd=0.5), ) %&gt;% #Plot map ggplot(.) + geom_map( data=map_data(&quot;world&quot;), map = map_data(&quot;world&quot;), aes(long, lat, map_id=region), color = &quot;white&quot;, fill = &quot;#cccccc&quot;, size = 0.2 ) + geom_point( aes(x=capture_longitude_jitter,y=capture_latitude_jitter, color=specimen_order), alpha=0.5, size=0.5, shape=16) + labs(color=&quot;Taxonomic order&quot;) + theme_minimal() + theme( axis.title.x=element_blank(), axis.title.y=element_blank(), legend.position = &quot;bottom&quot;) 3.2 Data statistics 3.2.1 Total data read_tsv(&quot;data/preprocessing.tsv&quot;) %&gt;% mutate(bases_pre_fastp = bases_pre_fastp / 1000000000) %&gt;% #convert bases to gigabases (GB) summarise( total= sum(bases_pre_fastp, na.rm = TRUE), mean= mean(bases_pre_fastp, na.rm = TRUE), sd = sd(bases_pre_fastp, na.rm = TRUE) ) %&gt;% tt() tinytable_qnsrs1cvs4it1a6qr9t7 .table td.tinytable_css_nrya3rfuilm9stns08ej, .table th.tinytable_css_nrya3rfuilm9stns08ej { border-bottom: solid 0.1em #d3d8dc; } total mean sd 14697.42 5.860216 5.044053 3.2.2 Quality-filtered data read_tsv(&quot;data/preprocessing.tsv&quot;) %&gt;% mutate(bases_post_fastp = bases_post_fastp / 1000000000) %&gt;% #convert bases to gigabases (GB) summarise( total= sum(bases_post_fastp, na.rm = TRUE), mean= mean(bases_post_fastp, na.rm = TRUE), sd = sd(bases_post_fastp, na.rm = TRUE) ) %&gt;% tt() tinytable_d8yr4xjf0ohrpfx4pwrl .table td.tinytable_css_qigcb6djhshpyaq2kvdx, .table th.tinytable_css_qigcb6djhshpyaq2kvdx { border-bottom: solid 0.1em #d3d8dc; } total mean sd 13486.81 5.377518 4.586315 3.2.3 Host genomic data read_tsv(&quot;data/preprocessing.tsv&quot;) %&gt;% mutate(host_bases = host_bases / 1000000000) %&gt;% #convert bases to gigabases (GB) summarise( total= sum(host_bases, na.rm = TRUE), mean= mean(host_bases, na.rm = TRUE), sd = sd(host_bases, na.rm = TRUE) ) %&gt;% tt() tinytable_qv66yk77kikwlw90cypa .table td.tinytable_css_2c1kr1crn2h7p0jyrreg, .table th.tinytable_css_2c1kr1crn2h7p0jyrreg { border-bottom: solid 0.1em #d3d8dc; } total mean sd 5554.962 2.193903 3.710612 3.2.4 Metagenomic data read_tsv(&quot;data/preprocessing.tsv&quot;) %&gt;% mutate(metagenomic_bases = metagenomic_bases / 1000000000) %&gt;% #convert bases to gigabases (GB) summarise( total= sum(metagenomic_bases, na.rm = TRUE), mean= mean(metagenomic_bases, na.rm = TRUE), sd = sd(metagenomic_bases, na.rm = TRUE) ) %&gt;% tt() tinytable_kn3dqftzgys4ke5na33v .table td.tinytable_css_fyyvgrcn8e4kg3lkfqwy, .table th.tinytable_css_fyyvgrcn8e4kg3lkfqwy { border-bottom: solid 0.1em #d3d8dc; } total mean sd 7931.853 3.132643 3.272361 3.2.5 Assemblies read_tsv(&quot;data/assembly.tsv&quot;) %&gt;% group_by(assembly_type) %&gt;% summarise(assembly_n=n()) %&gt;% tt() tinytable_12ohfw4zstpyx6bxi5ne .table td.tinytable_css_7weeu26vvhtwkoavdxq7, .table th.tinytable_css_7weeu26vvhtwkoavdxq7 { border-bottom: solid 0.1em #d3d8dc; } assembly_type assembly_n Coassembly 2228 Individual 1722 Multisplit 7 NA 1 3.2.6 MAGs read_tsv(&quot;data/mag.tsv&quot;) %&gt;% nrow() [1] 49957 "],["laboratory-sample-processing.html", "4 Laboratory sample processing 4.1 DNA extraction 4.2 Sequencing library preparation", " 4 Laboratory sample processing 4.1 DNA extraction 4.1.1 General statistics read_tsv(&quot;data/extraction.tsv&quot;) %&gt;% summarise( max= max(extraction_total, na.rm = TRUE), min= min(extraction_total, na.rm = TRUE), mean= mean(extraction_total, na.rm = TRUE), sd = sd(extraction_total, na.rm = TRUE) ) %&gt;% tt() tinytable_c3ga4t6kqu85jkydn1l0 .table td.tinytable_css_ened0j0xefkbpgu90ebx, .table th.tinytable_css_ened0j0xefkbpgu90ebx { border-bottom: solid 0.1em #d3d8dc; } max min mean sd 7110 0 365.683 677.4012 4.1.2 Sample types 4.1.2.1 Data distribution left_join(read_tsv(&quot;data/extraction.tsv&quot;), read_tsv(&quot;data/sample.tsv&quot;), by=&quot;sample_id&quot;) %&gt;% filter(sample_type %in% c(&quot;Faecal&quot;, &quot;Anal/cloacal swab&quot;)) %&gt;% ggplot(., aes(x=extraction_total, fill=sample_type, color=sample_type)) + geom_density() + scale_color_manual(values = c(&quot;#bdca50&quot;, &quot;#AA3377&quot;)) + scale_fill_manual(values = c(&quot;#bdca5050&quot;, &quot;#AA337750&quot;)) + labs(y=&quot;Density&quot;,x=&quot;DNA yield&quot;, fill=&quot;Sample type&quot;, color=&quot;Sample type&quot;) + theme_classic() 4.1.2.2 Comparison left_join(read_tsv(&quot;data/extraction.tsv&quot;), read_tsv(&quot;data/sample.tsv&quot;), by=&quot;sample_id&quot;) %&gt;% filter(sample_type %in% c(&quot;Faecal&quot;, &quot;Anal/cloacal swab&quot;)) %&gt;% mutate(extraction_total = ifelse(extraction_total == 0, 0.00001, extraction_total)) %&gt;% mutate(extraction_total = log(extraction_total)) %&gt;% select(extraction_total,sample_type) %&gt;% mutate(sample_type = factor(sample_type)) %&gt;% wilcox.test(extraction_total ~ sample_type,data=.) Wilcoxon rank sum test with continuity correction data: extraction_total by sample_type W = 335473, p-value &lt; 2.2e-16 alternative hypothesis: true location shift is not equal to 0 left_join(read_tsv(&quot;data/extraction.tsv&quot;), read_tsv(&quot;data/sample.tsv&quot;), by=&quot;sample_id&quot;) %&gt;% filter(sample_type %in% c(&quot;Faecal&quot;, &quot;Anal/cloacal swab&quot;)) %&gt;% group_by(sample_type) %&gt;% summarise( mean= mean(extraction_total, na.rm = TRUE), sd = sd(extraction_total, na.rm = TRUE)) %&gt;% tt() tinytable_zdrcapkepjr6ge5edwmy .table td.tinytable_css_863vvnp37i7dhle7q6na, .table th.tinytable_css_863vvnp37i7dhle7q6na { border-bottom: solid 0.1em #d3d8dc; } sample_type mean sd Anal/cloacal swab 170.2285 362.7389 Faecal 316.6666 423.6434 4.1.3 Taxonomy 4.1.3.1 Data distribution left_join(read_tsv(&quot;data/extraction.tsv&quot;), read_tsv(&quot;data/sample.tsv&quot;), by=&quot;sample_id&quot;) %&gt;% filter(sample_type %in% c(&quot;Faecal&quot;, &quot;Anal/cloacal swab&quot;)) %&gt;% filter(!is.na(tax_group)) %&gt;% ggplot(., aes(x=extraction_total, fill=tax_group, color=tax_group)) + geom_density() + scale_color_manual(values = c(&quot;#228833&quot;,&quot;#66CCEE&quot;,&quot;#CCBB44&quot;,&quot;#4477AA&quot;,&quot;#EE6677&quot;)) + scale_fill_manual(values = c(&quot;#22883350&quot;,&quot;#66CCEE50&quot;,&quot;#CCBB4450&quot;,&quot;#4477AA50&quot;,&quot;#EE667750&quot;)) + labs(y=&quot;Density&quot;,x=&quot;DNA yield&quot;, fill=&quot;Sample type&quot;, color=&quot;Sample type&quot;) + theme_classic() left_join(read_tsv(&quot;data/extraction.tsv&quot;), read_tsv(&quot;data/sample.tsv&quot;), by=&quot;sample_id&quot;) %&gt;% filter(sample_type %in% c(&quot;Faecal&quot;, &quot;Anal/cloacal swab&quot;)) %&gt;% ggplot(., aes(y=extraction_total,x=tax_group,color=tax_group)) + geom_jitter() + scale_color_manual(values = c(&quot;#22883380&quot;,&quot;#66CCEE80&quot;,&quot;#CCBB4480&quot;,&quot;#4477AA80&quot;,&quot;#EE667780&quot;)) + labs(y=&quot;DNA yield&quot;,x=&quot;Taxonomic group&quot;, color=&quot;Sample type&quot;) + theme_classic() 4.1.3.2 Comparison left_join(read_tsv(&quot;data/extraction.tsv&quot;), read_tsv(&quot;data/sample.tsv&quot;), by=&quot;sample_id&quot;) %&gt;% filter(sample_type %in% c(&quot;Faecal&quot;, &quot;Anal/cloacal swab&quot;)) %&gt;% mutate(extraction_total = ifelse(extraction_total == 0, 0.00001, extraction_total)) %&gt;% mutate(extraction_total = log(extraction_total)) %&gt;% select(extraction_total,tax_group) %&gt;% mutate(sample_type = factor(tax_group)) %&gt;% kruskal.test(extraction_total ~ tax_group,data=.) Kruskal-Wallis rank sum test data: extraction_total by tax_group Kruskal-Wallis chi-squared = 946.6, df = 4, p-value &lt; 2.2e-16 left_join(read_tsv(&quot;data/extraction.tsv&quot;), read_tsv(&quot;data/sample.tsv&quot;), by=&quot;sample_id&quot;) %&gt;% filter(sample_type %in% c(&quot;Faecal&quot;, &quot;Anal/cloacal swab&quot;)) %&gt;% group_by(tax_group) %&gt;% summarise( mean= mean(extraction_total, na.rm = TRUE), sd = sd(extraction_total, na.rm = TRUE)) %&gt;% tt() tinytable_envw3hjj8kcojszncoek .table td.tinytable_css_kkb9yrfoi947j6skz9ox, .table th.tinytable_css_kkb9yrfoi947j6skz9ox { border-bottom: solid 0.1em #d3d8dc; } tax_group mean sd Amphibians 233.35078 358.90219 Bats 59.60574 92.00357 Birds 74.43550 262.34517 Mammals 463.93202 471.41487 Reptiles 394.50619 437.86229 4.2 Sequencing library preparation 4.2.1 Overall left_join(read_tsv(&quot;data/library.tsv&quot;), read_tsv(&quot;data/sample.tsv&quot;), by=&quot;sample_id&quot;) %&gt;% filter(sample_type %in% c(&quot;Faecal&quot;, &quot;Anal/cloacal swab&quot;)) %&gt;% filter(library_PCR_cycles_required &gt; 0) %&gt;% summarise( max= max(library_PCR_cycles_required, na.rm = TRUE), min= min(library_PCR_cycles_required, na.rm = TRUE), mean= mean(library_PCR_cycles_required, na.rm = TRUE), sd = sd(library_PCR_cycles_required, na.rm = TRUE)) %&gt;% tt() tinytable_dzoeb97ab3a3fhe0f8p1 .table td.tinytable_css_mny2692p0pywtciqdlwc, .table th.tinytable_css_mny2692p0pywtciqdlwc { border-bottom: solid 0.1em #d3d8dc; } max min mean sd 33 2 9.150046 4.390537 left_join(read_tsv(&quot;data/library.tsv&quot;), read_tsv(&quot;data/sample.tsv&quot;), by=&quot;sample_id&quot;) %&gt;% filter(sample_type %in% c(&quot;Faecal&quot;, &quot;Anal/cloacal swab&quot;)) %&gt;% lm(library_PCR_cycles_required ~ library_input_dna, data = .) %&gt;% summary() Call: lm(formula = library_PCR_cycles_required ~ library_input_dna, data = .) Residuals: Min 1Q Median 3Q Max -11.5911 -2.4314 -0.7679 1.8114 21.5487 Coefficients: Estimate Std. Error t value Pr(&gt;|t|) (Intercept) 11.5911019 0.1103983 104.99 &lt;2e-16 *** library_input_dna -0.0284251 0.0009006 -31.56 &lt;2e-16 *** --- Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Residual standard error: 3.758 on 2443 degrees of freedom (11 observations deleted due to missingness) Multiple R-squared: 0.2897, Adjusted R-squared: 0.2894 F-statistic: 996.2 on 1 and 2443 DF, p-value: &lt; 2.2e-16 4.2.2 Sample types left_join(read_tsv(&quot;data/library.tsv&quot;), read_tsv(&quot;data/sample.tsv&quot;), by=&quot;sample_id&quot;) %&gt;% filter(sample_type %in% c(&quot;Faecal&quot;, &quot;Anal/cloacal swab&quot;)) %&gt;% filter(library_input_dna &lt;= 200) %&gt;% ggplot(., aes(y=library_PCR_cycles_required, x=library_input_dna, color=sample_type, group=sample_type)) + geom_point(alpha=0.5) + stat_smooth(method = &quot;lm&quot;, formula = y ~ x, geom = &quot;smooth&quot;) + scale_color_manual(values = c(&quot;#bdca50&quot;, &quot;#AA3377&quot;)) + theme_classic() + labs(y=&quot;Required number of cycles&quot;,x=&quot;Amount of inputted DNA (ng)&quot;, color=&quot;Sample type&quot;) + theme_classic() 4.2.2.1 Comparisons Relationship between the amount of inputted DNA (ng) and the required number of cycles. left_join(read_tsv(&quot;data/library.tsv&quot;), read_tsv(&quot;data/sample.tsv&quot;), by=&quot;sample_id&quot;) %&gt;% filter(sample_type %in% c(&quot;Faecal&quot;, &quot;Anal/cloacal swab&quot;)) %&gt;% filter(library_PCR_cycles_required&gt;0 &amp; library_input_dna&gt;0) %&gt;% lme(library_PCR_cycles_required ~ library_input_dna, random=~1 | sample_type, data = .) %&gt;% broom.mixed::tidy() %&gt;% tt() tinytable_v9w6xkaesx5h5cfqkcg0 .table td.tinytable_css_6pqhsh4g3tdp8279tpv0, .table th.tinytable_css_6pqhsh4g3tdp8279tpv0 { border-bottom: solid 0.1em #d3d8dc; } effect group term estimate std.error df statistic p.value fixed NA (Intercept) 11.87417166 1.1716203608 2330 10.13483 1.187767e-23 fixed NA library_input_dna -0.02501844 0.0008256453 2330 -30.30168 2.507418e-170 ran_pars sample_type sd_(Intercept) 1.64945139 NA NA NA NA ran_pars Residual sd_Observation 3.30432885 NA NA NA NA Comparison between slopes. left_join(read_tsv(&quot;data/library.tsv&quot;), read_tsv(&quot;data/sample.tsv&quot;), by=&quot;sample_id&quot;) %&gt;% filter(sample_type %in% c(&quot;Faecal&quot;, &quot;Anal/cloacal swab&quot;)) %&gt;% lm(library_PCR_cycles_required ~ library_input_dna * sample_type, data = .) %&gt;% broom::tidy() %&gt;% tt() tinytable_f2cxtgiseqorwine5a7z .table td.tinytable_css_zvr5lu5rdawwaal9h1ul, .table th.tinytable_css_zvr5lu5rdawwaal9h1ul { border-bottom: solid 0.1em #d3d8dc; } term estimate std.error statistic p.value (Intercept) 13.3047246163 0.187031107 71.13642643 0.000000e+00 library_input_dna -0.0260524410 0.001812871 -14.37082274 5.140847e-45 sample_typeFaecal -2.4762116244 0.227612093 -10.87908638 5.960119e-27 library_input_dna:sample_typeFaecal 0.0001282468 0.002078874 0.06169052 9.508143e-01 4.2.3 Taxonomy left_join(read_tsv(&quot;data/library.tsv&quot;), read_tsv(&quot;data/sample.tsv&quot;), by=&quot;sample_id&quot;) %&gt;% filter(sample_type %in% c(&quot;Faecal&quot;, &quot;Anal/cloacal swab&quot;)) %&gt;% filter(library_input_dna &lt;= 200) %&gt;% ggplot(., aes(y=library_PCR_cycles_required, x=library_input_dna, color=tax_group, group=tax_group)) + geom_point(alpha=0.5) + stat_smooth(aes(fill = tax_group), method = &quot;lm&quot;, formula = y ~ x, geom = &quot;smooth&quot;) + scale_color_manual(values = c(&quot;#22883380&quot;,&quot;#66CCEE80&quot;,&quot;#CCBB4480&quot;,&quot;#4477AA80&quot;,&quot;#EE667780&quot;)) + scale_fill_manual(values = c(&quot;#22883350&quot;,&quot;#66CCEE50&quot;,&quot;#CCBB4450&quot;,&quot;#4477AA50&quot;,&quot;#EE667750&quot;)) + theme_classic() + labs(y=&quot;Required number of cycles&quot;,x=&quot;Amount of inputted DNA (ng)&quot;, color=&quot;Sample type&quot;, fill=&quot;Sample type&quot;) + theme_classic() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
